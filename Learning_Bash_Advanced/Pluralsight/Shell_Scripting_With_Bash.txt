bash file needs executable permision: chmod u+x file.sh
Don't forget chmod u+w
Commnets start with "#"
A script:
	A text file contining code.
	To be run by interpreter.
	Will run each command in the file order.

$1 will caught the stdin
$* All argument in the command line
Command sustitution $(Command)
mkdir ~/.bin -> move the script to that directory and attach new "bin" directory to the Path: PATH=$PATH:~/.bin

-include the directory when calling it to PATH
-Just call it as a regular command
-shebang Start with #!/bin/bash #!/usr/bin/env bash

 Naming You Script

Don't name your script like a command: "test", "if", "clear"
Use a unique name for your script using type command: type <name>
----
[mgw@oc7340054542 Pluralsight]$ gvim Shell_Scripting_With_Bash.txt
[mgw@oc7340054542 Pluralsight]$ type vi
vi is aliased to `vim'
[mgw@oc7340054542 Pluralsight]$ type vim
vim is hashed (/usr/bin/vim)
[mgw@oc7340054542 Pluralsight]$ type mycomando
-bash: type: mycomando: not found
----

Variables

Used for stroe data by name
Assign value has to be as a singel word.
Don't use whitespace around =
Only Letters, numbers, and underscore are allowed
First character should be a letter or an underscore
Variable names are case-sensitive.
No Uppercase variables
Good Habit use lowercase for name variable.
Good Habit surrond variables with quotes.
Use "$x" instead of $x (Prevent surprises when it contains spaces).
Use Double quotes: keep meaning of the dollar sing intact.
Good Habit use Braces.
To tell Bash where the name of your variable ends.
	filename="${HOME}/${topic}notes.txt"
Good Habit Use $HOME instead of ~
----
[mgw@oc7340054542 Pluralsight]$ files="file1.txt file2.txt"
[mgw@oc7340054542 Pluralsight]$ touch $files
[mgw@oc7340054542 Pluralsight]$ ls -l $files
-rw-rw-r--. 1 mgw mgw 0 feb  1 10:12 file1.txt
-rw-rw-r--. 1 mgw mgw 0 feb  1 10:12 file2.txt
----
Debuggin bash 
#!/bin/bash -x
set -x
-
|
|
|
-
set +a
----
#!/bin/bash
#Simple note-taking script
#Author: reindert
#get date
date=$(date)
#get the topic
## Usamos la "" para cuando queremos evitar el error en espacios en blanco
##es una validacion para que el usuario pueda incluir valores en blanco
### se podria user el tr que use en blank2underscore.sh para formatear la
### la variable y cambiar los whitespace en underscore
$1="$1"
#filename to write to
filename="${HOME}/${topic}notes.txt"
#Ask user for input
read -p "Your note: " note

echo "$date: $note" >> "$filename"
echo "Note '$note' saved to $filename"
----

Make Decisions on scrtips

----
[mgw@oc7340054542 Pluralsight]$ if mkdir a; then echo "ok"; else echo "error";fi
ok
[mgw@oc7340054542 Pluralsight]$ if mkdir a; then echo "ok"; else echo "error";fi
mkdir: cannot create directory ‘a’: File exists
error
[mgw@oc7340054542 Pluralsight]$
----

Return codes

Return code or exist status:
Value returned by a program upon exit
0...255
0 means sucess, others values are error codes
Shell scrtip return values with exit: exit 0
Good Habit make sure your program exist with a correct value
Always call exit with a value

Conditional expressions:
Test on files and directories
Test on strings
Arithmetics tests

Syntax [[ Expresion ]] (Check for withespace)
Expression			True If
[[ $str ]]			str is not empty
[[ $str = "something" ]]	str equals string "something"
[[ -e $filename ]]		file $filename exists
[[ -d $dirname ]]		$dirname is a directory

Spaces around the expression are very important!
Same for switches (-e) and equals sign.

----
[mgw@oc7340054542 Pluralsight]$ help [[
[[ ... ]]: [[ expression ]]
    Execute conditional command.

    Returns a status of 0 or 1 depending on the evaluation of the conditional
    expression EXPRESSION.  Expressions are composed of the same primaries used
    by the `test' builtin, and may be combined using the following operators:

      ( EXPRESSION )    Returns the value of EXPRESSION
      ! EXPRESSION              True if EXPRESSION is false; else false
      EXPR1 && EXPR2    True if both EXPR1 and EXPR2 are true; else false
      EXPR1 || EXPR2    True if either EXPR1 or EXPR2 is true; else false

    When the `==' and `!=' operators are used, the string to the right of
    the operator is used as a pattern and pattern matching is performed.
    When the `=~' operator is used, the string to the right of the operator
    is matched as a regular expression.

    The && and || operators do not evaluate EXPR2 if EXPR1 is sufficient to
    determine the expression's value.

    Exit Status:
    0 or 1 depending on value of EXPRESSION.
----
----
[mgw@oc7340054542 Pluralsight]$ help test
test: test [expr]
    Evaluate conditional expression.

    Exits with a status of 0 (true) or 1 (false) depending on
    the evaluation of EXPR.  Expressions may be unary or binary.  Unary
    expressions are often used to examine the status of a file.  There
    are string operators and numeric comparison operators as well.

    The behavior of test depends on the number of arguments.  Read the
    bash manual page for the complete specification.

    File operators:

      -a FILE        True if file exists.
      -b FILE        True if file is block special.
      -c FILE        True if file is character special.
      -d FILE        True if file is a directory.
      -e FILE        True if file exists.
      -f FILE        True if file exists and is a regular file.
      -g FILE        True if file is set-group-id.
      -h FILE        True if file is a symbolic link.
      -L FILE        True if file is a symbolic link.
      -k FILE        True if file has its `sticky' bit set.
      -p FILE        True if file is a named pipe.
      -r FILE        True if file is readable by you.
      -s FILE        True if file exists and is not empty.
      -S FILE        True if file is a socket.
      -t FD          True if FD is opened on a terminal.
      -u FILE        True if the file is set-user-id.
      -w FILE        True if the file is writable by you.
      -x FILE        True if the file is executable by you.
      -O FILE        True if the file is effectively owned by you.
      -G FILE        True if the file is effectively owned by your group.
      -N FILE        True if the file has been modified since it was last read.
.........
----
Contional expression 2

Classical command: "test"
Also : "["
Harder to use, easer to make mistakes
Only use for portability

[[ ... ]] is a bash extension not a command but special syntax
No quotes needed around variables
Good Habit: use [[ ... ]] intead of [ ... ]

Arithmetic tests

For comparing integers only
[[ arg1 OP arg2 ]]
Don't use 0. <, > for numbers! use only for strings
Use "!" to nagate test
Use "&&" for "and"
Use "||" for "or"
elif
Nested if
Return codes


Special variables
$# contains number of script arguments.
$? contains exit status for last command.

To get the length of the string in a variable:
Use ${#var}

Input & output

echo - Prints its arguments to standar output, followed by a newline
	-n supresses new line
	-e allows use of escape sequences
		\t: tab
		\b backspace
printf
	can do more sophisticated output than echo
	Uses a formating string
	help printf
	man printf
	http://wiki.bash-hackers.org/commands/builtin/printf
----
[mgw@oc7340054542 Pluralsight]$ printf "hello"
hello[mgw@oc7340054542 Pluralsight]$ printf "hello\n"
hello
[mgw@oc7340054542 Pluralsight]$ printf "hello %s, how are you ?\n" $USER
hello mgw, how are you ?
[mgw@oc7340054542 Pluralsight]$ printf "p%st\n" a e i o u
pat
pet
pit
pot
put
[mgw@oc7340054542 Pluralsight]$ printf "%ss Home is in %s\n" $HOME $USER
/home/mgws Home is in mgw
----

read revisited
	Read input into a variable.
	"read x".
	No variable specified? Will use REPLY.
	-n or -N specifies number of characters to read.
	-s will supress output (useful for password).
	-r disallows escape sequences, line continuation.
	Good Habit always use -r
	read can read words in a line into multiple variables
		read x y
		input "1 2 3": x="1", y="23"
		Use IFS variable for delimiters
----
[mgw@oc7340054542 Pluralsight]$ read; echo $REPLY
\
>

[mgw@oc7340054542 Pluralsight]$ read; echo $REPLY
\\
\
[mgw@oc7340054542 Pluralsight]$ read -r; echo $REPLY
\
\
[mgw@oc7340054542 Pluralsight]$
----

Standar Streams
Three standars streams
	input	/dev/stdin
	output	/dev/stdout
	error	/dev/stderr	Used for diagnostic or error message
	/dev/null discard all data sent to it.

Redirections
	Input redirection: <
	Output redirection: >
	Aoppend to the end of a file: >>
	Pipe

Redirections 2
	Redirect a specific stream with N>
		"cmd 2> /dev/null" discards all errors
	Redirect to a specific stream with >&N
		>&2 sends output to stderr (equivalent to 1>&2)
		2>&1 redirects stderr into stdout
	Sending both error and output to a single file
		"cmd > logfile 2>&1"
		Don't do this: cmd > logfile 2> logfile 

----
[mgw@oc7340054542 Pluralsight]$ ls > demo
[mgw@oc7340054542 Pluralsight]$ cat demo
a
AreYouSure.sh
compare_directories.sh
create_script.sh
demo
file1.txt
file2.txt
Shell_Scripting_With_Bash.txt
taking_note.sh
testing_create_script
[mgw@oc7340054542 Pluralsight]$ echo "\n" >> demo
[mgw@oc7340054542 Pluralsight]$ ./taking_note.sh >> demo
Your note: Trabajando con redirecciones
[mgw@oc7340054542 Pluralsight]$ cat demo
a
AreYouSure.sh
compare_directories.sh
create_script.sh
demo
file1.txt
file2.txt
Shell_Scripting_With_Bash.txt
taking_note.sh
testing_create_script
\n
Note 'Trabajando con redirecciones' saved to /home/mgw/Documents/Extra/learning-how-to-
code/Learning_Bash_Advanced/Pluralsight/notes.txt
[mgw@oc7340054542 Pluralsight]$ echo "This come from a file" > note.txt
[mgw@oc7340054542 Pluralsight]$ ./taking_note.sh < note.txt
Note 'This come from a file' saved to /home/mgw/Documents/Extra/learning-how-to-code/Learning_Bash_Advanced/Pluralsight/notes.txt
[mgw@oc7340054542 Pluralsight]$ cat notes.txt
vie feb  3 11:33:33 CST 2017: Trabajando con redirecciones
vie feb  3 11:38:32 CST 2017: This come from a file
[mgw@oc7340054542 Pluralsight]$
----

check for create_script.sh script, put attention on redirection
2> /dev/null
Redirecciona stdout a null
#check if the script's name is a command                                                                                                                                     
37 if type "$scriptname" 2> /dev/null ; then                                                                                                                                    
38 →       echo "There is already a command with name ${scriptname}"                                                                                                            
39 →       exit 1   
----
[mgw@oc7340054542 Pluralsight]$ ./create_script.sh new2
./create_script.sh: line 37: type: new2: not found
Script created; not starting editor because $EDITOR is not set.
[mgw@oc7340054542 Pluralsight]$ ./create_script.sh new3
Script created; not starting editor because $EDITOR is not set.
[mgw@oc7340054542 Pluralsight]$
----

check for create_script.sh script, put attention on redirection
> /dev/null 2>&1
Redirecciona 
#check if the script's name is a command                                                                                                                                     
37 if type "$scriptname" > /dev/null 2>&1 ; then                                                                                                                                
38 →       echo "There is already a command with name ${scriptname}"                                                                                                            
39 →       exit 1                                                                                                                                                               
40 fi                              
[mgw@oc7340054542 Pluralsight]$ ./create_script.sh cp
cp is /usr/bin/cp
There is already a command with name cp
[mgw@oc7340054542 Pluralsight]$ ./create_script.sh cp
There is already a command with name cp
[mgw@oc7340054542 Pluralsight]$
----

Summary Redirections
Redirecting a specific stream, next example will let you redirect only errors: 
2>
Redirecting into another stream, this will let you redirect the error steam into the standard
output stream.
2>&1

Control flow 
	Loops.
	while test; do
		;; code to repeat
	done
	
	until test; do
		;; code to repeat
	done
	for VAR in WORDS; do
		;; code to be repeated
	done
----
[mgw@oc7340054542 Pluralsight]$ for i in Just a list of words; do echo $i; done
Just
a
list
of
words
[mgw@oc7340054542 Pluralsight]$ for i in "Just a list of words"; do echo $i; done
Just a list of words
[mgw@oc7340054542 Pluralsight]$
[mgw@oc7340054542 Pluralsight]$ s="This variable contains a list fo words"
[mgw@oc7340054542 Pluralsight]$ for i in "$s"; do echo $i; done
This variable contains a list fo words
[mgw@oc7340054542 Pluralsight]$ for i in $s; do echo $i; done
This
variable
contains
a
list
fo
words
[mgw@oc7340054542 Pluralsight]$
----
	The C-Style for Loop
	for (( INIT; TEST; UPDATE )); do
		;; loop code
	done
		Use double parentheses
		First expression "INI": initialize your loop variable(s)
		Second expression "TEST": a test. The loop will run as long as this is true
		Third expression "UPDATE": update the loop variable(s)
	Break and continue
		break quits the loop
		continue 
			skips the rest of the current iteration
			continues with next iteration
		both can be used in for, while and until
	Case
		case WORD in
			PATTERN1)
				;;
			PATTERN2)
				;;
			PATTERNn)
				;;
		esac

Command Groups
	Group commands with {}
		will group them into a single statement
	Compound comands
	&& and || operators
	
Advance features
	declare
		declare -i num
			Now $num can only hold numbers, Trying to set it to shomthing else will NOt give an error, instead, this will ser a value of 0.
		Unset an attribute with +
		declare +i num 
	Integer variables
	Read-Only variables
	Exporting
		By default, variables are local to your script or terminal.
		Export a variable to make it available to subprocesses, You cannot pass a variable to the program that runs your script.
		exṕort var="value"
		declare -x var="value"
		Attributes are not exported to other processes
	Arrays

Working with arguments
	Special variables
		positional parameters
			Hold the n-th command line argunment; $1 $2 etc. All the differents arguments in order.
			Above 9 use braces: ${10} ${25}
			$0 hold the name of the script
			$@:All : Contains all the arguments given to your scripts
		$* and $
Getopts
	Utility to help parse arguments lists
		Expects options to start with a dash (-x)
		Allows options that take an argument (-f file)
	getops opstring name
		A list of expected options
		"ab" will let your script handle an option -a and/or -b
		Append: to options that take and argument
		"a:b2 will let a take an argument, but no b
	name	
		The name of variable
		Every time you call getopts, it will place the next option into $name
		getopts returns false when no more options are left.
Functions
	Define your own command
	name () { ... }
		You can run the code in the braces as a new command
	Execute it like any command
		Give it arguments
		Use redirection
	Positional parameters are available for function argument
	Naming your functions
		same rules for naming scripts
	Bash variables are globally visible
		in a function, you can make a variable local to that function
		use declare local
	Returning any other 
		Use a global variable
		Or send the data to output and use command substitution
	Exporting a function
		export -f fun
	Function and redirections
		Redirection is allowed immediatly after function definition
		Will be executed when function is run
		fun () {...}>&2
	A command in a pipeline runs in a subshell
	Here documents
		Have a command read its input from the source file
		<<Tag
		Tag defines end of input

